#------------------------------------------------------------------------------
# CMake file for python support
#------------------------------------------------------------------------------

#python wrapper

PROJECT(pyautoit)

FIND_PACKAGE(PythonLibs)
INCLUDE_DIRECTORIES(${PYTHON_INCLUDE_PATH})
LINK_DIRECTORIES(${PYTHON_LIBRARIES})

FIND_PACKAGE(PythonInterp)
MESSAGE(STATUS, ${PYTHON_INCLUDE_PATH})
MESSAGE(STATUS, ${PYTHON_LIBRARIES})
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR})


EXECUTE_PROCESS(COMMAND ${PYTHON_EXECUTABLE} --version ERROR_VARIABLE PYTHON_VERSION_FULL OUTPUT_STRIP_TRAILING_WHITESPACE)
MESSAGE(STATUS, ${PYTHON_VERSION_FULL})
STRING(REGEX MATCH "[0-9].[0-9]" PYTHON_VERSION_MAJOR_MINOR "${PYTHON_VERSION_FULL}")
EXECUTE_PROCESS(COMMAND ${PYTHON_EXECUTABLE}
		    -c "import distutils.sysconfig ; print distutils.sysconfig.get_python_lib(plat_specific=0)"
		    OUTPUT_VARIABLE PYTHON_PACKAGES_PATH
		    OUTPUT_STRIP_TRAILING_WHITESPACE)
MESSAGE(STATUS, "PYTHON_PACKAGES_PATH ${PYTHON_PACKAGES_PATH}")

EXECUTE_PROCESS(COMMAND ${PYTHON_EXECUTABLE}
			-c "import distutils.util ; print distutils.util.get_platform()"
			OUTPUT_VARIABLE PYTHON_PLATFORM
			OUTPUT_STRIP_TRAILING_WHITESPACE)
MESSAGE(STATUS, "PLATFORM ${PYTHON_PLATFORM}")


MESSAGE(STATUS, "CURRENT_SOURCE ${CMAKE_CURRENT_SOURCE_DIR}")
ADD_CUSTOM_TARGET(python ALL)


#install python wrapper

IF(WIN32)
	ADD_CUSTOM_COMMAND(
		COMMAND ${PYTHON_EXECUTABLE} 
		ARGS setup.py build -cmingw32
		TARGET python
		WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})	
	INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/lib.${PYTHON_PLATFORM}-${PYTHON_VERSION_MAJOR_MINOR}/pyautoit.pyd
		DESTINATION ${PYTHON_PACKAGES_PATH}
		COMPONENT main)
ELSE(WIN32)
	ADD_CUSTOM_COMMAND(
		COMMAND ${PYTHON_EXECUTABLE} 
		ARGS setup.py build
		TARGET python
		WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
	INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/lib.${PYTHON_PLATFORM}-${PYTHON_VERSION_MAJOR_MINOR}/pyautoit.so 
		DESTINATION ${PYTHON_PACKAGES_PATH}
		COMPONENT main)
ENDIF(WIN32)